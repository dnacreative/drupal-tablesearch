<?php

/**
 * Query extender for table search widget.
 */
class TableSearch extends SelectQueryExtender {

  /**
   * The highest element we've autogenerated so far.
   *
   * @var int
   */
  static private $maxId = 0;

  /**
   * Get maximum (current) identifier.
   *
   * @return int
   */
  static public function getMaxId() {
    return self::$maxId;
  }

  /**
   * The unique ID of this pager on this page.
   *
   * @var int
   */
  protected $id;

  /**
   * Fields to search into.
   *
   * @var string[]
   */
  protected $fields;

  /**
   * Default constructor.
   *
   * @param SelectQueryInterface $query
   * @param DatabaseConnection $connection
   */
  public function __construct(SelectQueryInterface $query, DatabaseConnection $connection) {
    parent::__construct($query, $connection);

    // Add pager tag. Do this here to ensure that it is always added before
    // preExecute() is called.
    $this->addTag('tablesearch');
  }

  /**
   * Override the execute method.
   *
   * Before we run the query, we need to add pager-based range() instructions
   * to it.
   */
  public function execute() {

    // Add convenience tag to mark that this is an extended query. We have to
    // do this in the constructor to ensure that it is set before preExecute()
    // gets called.
    if (!$this->preExecute($this)) {
      return null;
    }

    // A NULL limit is the "kill switch" for pager queries.
    if (empty($this->fields)) {
      return $this->query->execute();
    }
    $this->ensureId();

    if (!empty($_GET['search'])) {
      $or = db_or();
      foreach ($this->fields as $field) {
        $or->condition($field, '%' . db_like($_GET['search']) . '%', 'LIKE');
      }
      $this->query->condition($or);
    }

    // Now that we've added our pager-based range instructions, run the query normally.
    return $this->query->execute();
  }

  /**
   * Ensure this element has an identifier.
   */
  protected function ensureId() {
    if (!isset($this->id)) {
      $this->id = self::$maxId++;
    }
  }

  /**
   * Specify the maximum number of elements per page for this query.
   *
   * The default if not specified is 10 items per page.
   *
   * @param string|array $fields
   *   Fields in which to search
   */
  public function searchFields($fields) {
    $this->fields = is_array($fields) ? $fields : array($fields);
    return $this;
  }
}
